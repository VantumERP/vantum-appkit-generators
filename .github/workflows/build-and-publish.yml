name: Build, Test & Publish

on:
  push:
    tags: [ "v*.*.*" ]  # Only trigger on version tags (e.g., v0.1.0)
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-test-pack:
    name: Build, Test & Package
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Extract version from tag
      id: version
      shell: bash
      run: |
        if [[ "${{ github.ref }}" =~ ^refs/tags/v(.+)$ ]]; then
          # Extract version from tag (v0.1.0 -> 0.1.0)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION"
        else
          # Use version from .csproj for manual workflow dispatch
          VERSION=$(grep -oP '<Version>\K[^<]+' Vantum.AppKit.Generators.csproj)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version from .csproj: $VERSION"
        fi
    
    - name: Update project version
      shell: bash
      run: |
        # Update the version in the .csproj file
        VERSION="${{ steps.version.outputs.version }}"
        echo "Updating version to: $VERSION"
        sed -i.bak "s|<Version>[^<]*</Version>|<Version>$VERSION</Version>|g" Vantum.AppKit.Generators.csproj
        echo ""
        echo "Updated version in .csproj:"
        grep "<Version>" Vantum.AppKit.Generators.csproj
        echo ""
        echo "Full PropertyGroup section:"
        cat Vantum.AppKit.Generators.csproj | grep -A 10 -B 2 "<Version>"
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build -c Release --no-restore
    
    - name: Restore Test Consumer dependencies
      run: dotnet restore TestConsumer/TestConsumer.csproj
    
    - name: Build Test Consumer
      run: dotnet build TestConsumer/TestConsumer.csproj -c Release --no-restore
    
    - name: Run and Verify Test Consumer
      shell: bash
      run: |
        echo "Running test consumer..."
        set +e  # Don't exit on error immediately
        output=$(dotnet run --project TestConsumer/TestConsumer.csproj --configuration Release --no-build 2>&1)
        exit_code=$?
        set -e
        
        echo "=== Test Consumer Output ==="
        echo "$output"
        echo "=== End Output (exit code: $exit_code) ==="
        
        if [ $exit_code -ne 0 ]; then
          echo "❌ Test consumer failed to run (exit code: $exit_code)"
          exit 1
        fi
        
        if ! echo "$output" | grep -q "Found 5 generated manifest"; then
          echo "❌ Generator test failed - expected 5 manifests"
          exit 1
        fi
        if ! echo "$output" | grep -q "Generator is working"; then
          echo "❌ Generator test failed"
          exit 1
        fi
        echo "✅ Generator tests passed!"
    
    - name: Pack
      run: dotnet pack -c Release --no-build -o artifacts
    
    - name: Push packages to NuGet.org
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      shell: bash
      run: |
        shopt -s nullglob
        # Push .nupkg files to NuGet.org
        for f in artifacts/*.nupkg; do
          if [ -f "$f" ]; then
            echo "Pushing $f to NuGet.org..."
            dotnet nuget push "$f" \
              --source https://api.nuget.org/v3/index.json \
              --api-key "${{ secrets.NUGET_API_KEY }}" \
              --skip-duplicate
          fi
        done
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: nuget-packages
        path: artifacts/
        retention-days: 30
