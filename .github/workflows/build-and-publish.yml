name: Build, Test & Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-test-pack:
    name: Build, Test & Package
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for versioning
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2
      with:
        nuget-version: 'latest'
    
    - name: Install Mono (for NuGet on Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y mono-complete
    
    - name: Restore Generator dependencies
      run: dotnet restore Vantum.AppKit.Generators.csproj
    
    - name: Build Generator
      run: dotnet build Vantum.AppKit.Generators.csproj --configuration Release --no-restore
    
    - name: Restore Test Consumer dependencies
      run: dotnet restore TestConsumer/TestConsumer.csproj
    
    - name: Build Test Consumer
      run: dotnet build TestConsumer/TestConsumer.csproj --configuration Release --no-restore
    
    - name: Run and Verify Test Consumer
      shell: pwsh
      run: |
        Write-Host "Running test consumer..."
        $output = dotnet run --project TestConsumer/TestConsumer.csproj --configuration Release --no-build 2>&1 | Out-String
        Write-Host $output
        
        if ($output -notmatch "Found 2 generated manifest") {
          Write-Error "Generator test failed - expected 2 manifests"
          exit 1
        }
        if ($output -notmatch "Generator is working") {
          Write-Error "Generator test failed"
          exit 1
        }
        Write-Host "✅ Generator tests passed!" -ForegroundColor Green
    
    - name: Create NuGet Package
      run: nuget pack Vantum.AppKit.Generators.nuspec -OutputDirectory output -Properties Configuration=Release
    
    - name: Upload Package Artifact
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: output/*.nupkg
        retention-days: 7
    
    - name: Publish to NuGet.org
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      run: |
        dotnet nuget push "output/*.nupkg" \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate
      continue-on-error: false
    
    - name: Create GitHub Release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      shell: pwsh
      run: |
        # Extract version from tag
        $tag = "${{ github.ref_name }}"
        $version = $tag -replace '^v', ''
        
        Write-Host "Creating GitHub release for $tag (version $version)"
        
        # Note: This step documents the release tag
        # The tag already exists since it triggered this workflow
        Write-Host "✅ Tag $tag triggered this release"
      continue-on-error: true
